#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'
require 'yaml'

def download(options)
  args = case options[:scm]
    when "git"
      ["git", "clone", "--quiet", options[:url], options[:dest]]
    when "svn"
      ["svn", "checkout", "--quiet", options[:url], options[:dest]]
  end

  system(*args)
end

def update(options)
  args = case options[:scm]
    when "git"
      %w[git pull --quiet]
    when "svn"
      %w[svn update --quiet]
  end

  Dir.chdir(options[:dest]) do
    system(*args)
  end
end

ROOT = File.dirname(Pathname.new(__FILE__).realpath)
XDG_CACHE_HOME = ENV['XDG_CACHE_HOME'] || File.join(ENV['HOME'], '.cache')
BUNDLES_DIR = File.join(XDG_CACHE_HOME, 'vim', 'bundles')
BUNDLES_FILE = File.join(ROOT, 'bundles.yml')

#
# bundle specs:
#
# Array of "method:name:url"
#
# methods:
#   svn
#   git
#
# shortcuts:
#   "gh:user/repository" -> "git:repository:https://github.com/user/repository.git"
#
bundle_re = /(.*?):(.*?):(.*)/
bundles = YAML.load_file(BUNDLES_FILE)
bundles.map! do |repo|
  bundle = case repo
    when /^gh:(.*)/
      "git:#{File.basename($1)}:https://github.com/#{$1.sub /\.git$/, ''}.git"
    else
      repo
  end

  match = bundle.match(bundle_re)

  {
    scm: match[1],
    name: match[2],
    url: match[3],
  }
end

FileUtils.mkdir_p(BUNDLES_DIR) unless File.exists?(BUNDLES_DIR)

Dir[File.join(BUNDLES_DIR, "*")].each do |dir|
  name = File.basename(dir)

  unless bundles.find {|b| name == b[:name] }
    puts "[-] Removing #{name}"
    FileUtils.rm_rf(dir)
  end
end

bundles.each do |spec|
  dest = File.join(BUNDLES_DIR, spec[:name])
  options = spec.merge(dest: dest)

  if !File.exists?(dest)
    puts "[+] Adding #{spec[:name]}"
    download(options)
  else
    puts "[u] Updating #{spec[:name]}"
    update(options)
  end
end

puts "Generating helptags ... "
system("vim", "-c", "call pathogen#helptags()", "-c", "quit")
puts "Done"
